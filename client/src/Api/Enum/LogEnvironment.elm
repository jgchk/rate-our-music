-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.Enum.LogEnvironment exposing (..)

import Json.Decode as Decode exposing (Decoder)


type LogEnvironment
    = Development
    | Production
    | Unknown


list : List LogEnvironment
list =
    [ Development, Production, Unknown ]


decoder : Decoder LogEnvironment
decoder =
    Decode.string
        |> Decode.andThen
            (\string ->
                case string of
                    "DEVELOPMENT" ->
                        Decode.succeed Development

                    "PRODUCTION" ->
                        Decode.succeed Production

                    "UNKNOWN" ->
                        Decode.succeed Unknown

                    _ ->
                        Decode.fail ("Invalid LogEnvironment type, " ++ string ++ " try re-running the @dillonkearns/elm-graphql CLI ")
            )


{-| Convert from the union type representing the Enum to a string that the GraphQL server will recognize.
-}
toString : LogEnvironment -> String
toString enum____ =
    case enum____ of
        Development ->
            "DEVELOPMENT"

        Production ->
            "PRODUCTION"

        Unknown ->
            "UNKNOWN"


{-| Convert from a String representation to an elm representation enum.
This is the inverse of the Enum `toString` function. So you can call `toString` and then convert back `fromString` safely.

    Swapi.Enum.Episode.NewHope
        |> Swapi.Enum.Episode.toString
        |> Swapi.Enum.Episode.fromString
        == Just NewHope

This can be useful for generating Strings to use for <select> menus to check which item was selected.

-}
fromString : String -> Maybe LogEnvironment
fromString enumString____ =
    case enumString____ of
        "DEVELOPMENT" ->
            Just Development

        "PRODUCTION" ->
            Just Production

        "UNKNOWN" ->
            Just Unknown

        _ ->
            Nothing
