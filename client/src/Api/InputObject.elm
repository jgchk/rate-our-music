-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module Api.InputObject exposing (..)

import Api.Interface
import Api.Object
import Api.Scalar
import Api.ScalarCodecs
import Api.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildArtistInput :
    (ArtistInputOptionalFields -> ArtistInputOptionalFields)
    -> ArtistInput
buildArtistInput fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { id = Absent, name = Absent }
    in
    { id = optionals____.id, name = optionals____.name }


type alias ArtistInputOptionalFields =
    { id : OptionalArgument Int
    , name : OptionalArgument String
    }


{-| Type for the ArtistInput input object.
-}
type alias ArtistInput =
    { id : OptionalArgument Int
    , name : OptionalArgument String
    }


{-| Encode a ArtistInput into a value that can be used as an argument.
-}
encodeArtistInput : ArtistInput -> Value
encodeArtistInput input____ =
    Encode.maybeObject
        [ ( "id", Encode.int |> Encode.optional input____.id ), ( "name", Encode.string |> Encode.optional input____.name ) ]


buildErrorInput :
    ErrorInputRequiredFields
    -> (ErrorInputOptionalFields -> ErrorInputOptionalFields)
    -> ErrorInput
buildErrorInput required____ fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { data = Absent }
    in
    { message = required____.message, name = required____.name, data = optionals____.data }


type alias ErrorInputRequiredFields =
    { message : String
    , name : String
    }


type alias ErrorInputOptionalFields =
    { data : OptionalArgument String }


{-| Type for the ErrorInput input object.
-}
type alias ErrorInput =
    { message : String
    , name : String
    , data : OptionalArgument String
    }


{-| Encode a ErrorInput into a value that can be used as an argument.
-}
encodeErrorInput : ErrorInput -> Value
encodeErrorInput input____ =
    Encode.maybeObject
        [ ( "message", Encode.string input____.message |> Just ), ( "name", Encode.string input____.name |> Just ), ( "data", Encode.string |> Encode.optional input____.data ) ]
